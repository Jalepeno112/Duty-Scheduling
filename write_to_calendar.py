import pandas as pd
import re
import argparse
import os
import numpy as np
import math
import itertools
from httplib2 import Http
from apiclient.discovery import build
import oauth2client
import argparse

def run(schedule_file):

    # read the excel workbook
    # the *Day Schedule* has the days as the index, and CF1 and CF2 as columns
    df = pd.read_excel(schedule_file, "Day Schedule")

    print("{0}".format(df))

    # load flags for google oauth
    flags = argparse.ArgumentParser(parents=[oauth2client.tools.argparser]).parse_known_args()[0]

    writeToCalendar(df, flags)

def writeToCalendar(df, flags):
    SCOPES = 'https://www.googleapis.com/auth/calendar'
    CLIENT_SECRET_FILE = os.path.join(['config','client_secret.json'])
    APPLICATION_NAME = "Duty Schedule"

    # connect to google services
    store = oauth2client.file.Storage(os.path.join(['config','storage.json'])
    creds = store.get()

    if not creds or creds.invalid:
        flow = oauth2client.client.flow_from_clientsecrets('client_secret.json', SCOPES)
        creds = oauth2client.tools.run_flow(flow, store, flags)
    CAL = build('calendar', 'v3', http=creds.authorize(Http()))

    calendar_list = CAL.calendarList().list().execute()
    cal_id = (c['id'] for c in calendar_list['items'] if c['summary'] == "MP Duty Schedule").next()
    print ("Found Calendar {0}".format(cal_id))

    rows = df.iterrows()

    for i,r in rows:
        year = "2016"
        day = i.split("/")
        date = "{0}-{1}-{2}".format(year,day[0].zfill(2), day[1].zfill(2))

        print ("Writing day: {0}".format(date))
        event_name = "{0} & {1}".format(r['CF1'].split('@')[0], r['CF2'].split('@')[0])
        event = {
            'summary': event_name,
            'description': event_name,
            'start': {
                'date': date, #date here
            },
            'end': {
                'date': date, #date here
            },
        }
        e = CAL.events().insert(calendarId=cal_id,
            sendNotifications=True, body=event).execute()

        print "{0}: {1}".format(event_name, e['status'])

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("schedule_file", help="Name of the Excel workbook containing the schedule.  This file is typically generated by duty_scheduling.py")

    args = parser.parse_args()
    run(schedule_file=args.schedule_file)
